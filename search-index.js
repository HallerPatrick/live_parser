var searchIndex = JSON.parse('{\
"liva_parser":{"doc":"The parser for the liva source code","t":[6,6,0,0,5,5,5,0,0,13,13,13,13,4,4,4,13,13,3,13,13,13,13,4,13,13,0,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,3,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,13,13,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,3,13,13,13,13,13,13,13,13,13,3,4,13,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,3,3,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,12,12,11,5,11,11,11,3,11,11,11,11,11,11,11,5,11,11,11,3,11,11,11,11,11,11,12,11,12,5,12,11,11,11,3,11,11,12,12,11,11,11,11,11,5,12,11,11,11,3,11,11,11,11,11,11,11,5,11,11,11,3,12,11,11,11,12,11,11,11,11,5,12,11,11,11,13,13,13,3,13,13,13,13,17,13,13,13,13,13,13,4,13,13,13,13,3,4,5,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,5,11,11,5,5,5,11,11,5,5,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["Res","Span","expression","literals","parse_source","parse_source","print_ast","statement","tokens","BinOp","BinaryOp","Call","Exp","ExprOrVarname","ExprSuffix","Expression","FuncCall","Literal","PrefixExpr","PrefixExpr","TableDot","TableIdx","UnOp","UnOrBinOp","UnaryOp","Varname","binary","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","ne","ne","ne","ne","ne","prefix","suffix_chain","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","BinaryOp","UnaryOp","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","into","into","left","ne","ne","op","op","operand","right","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Call","args","borrow","borrow_mut","callee","clone","clone_into","eq","fmt","from","into","ne","to_owned","try_from","try_into","type_id","Array","Boolean","Literal","Map","Nil","Num","Str","Token","Variable","Variable","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","name","ne","ne","ne","new","pos","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","0","0","0","0","0","0","0","Assignment","Block","Class","Expression","For","Fun","FuncCall","If","Import","LAssignment","Return","ReturnStmt","Statement","While","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","declaration","eq","eq","eq","fmt","fmt","fmt","from","from","from","import","into","into","into","ne","ne","ne","parse_block","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","values","0","0","0","0","0","0","0","0","0","0","0","assignment","class","for_statement","function","if_statement","while_statement","Assignment","LAssignment","borrow","borrow","borrow_mut","borrow_mut","eq","eq","expression","expression","fmt","fmt","from","from","into","into","ne","ne","try_from","try_from","try_into","try_into","type_id","type_id","variable","variable","Class","borrow","borrow_mut","eq","fmt","from","into","methods","name","ne","parse_class","try_from","try_into","type_id","For","borrow","borrow_mut","eq","fmt","from","into","ne","parse_for","try_from","try_into","type_id","Function","borrow","borrow_mut","eq","fmt","from","into","name","ne","parameters","parse_function","statements","try_from","try_into","type_id","If","borrow","borrow_mut","cond","else_statements","eq","fmt","from","into","ne","parse_if","stmts","try_from","try_into","type_id","While","borrow","borrow_mut","eq","fmt","from","into","ne","parse_while","try_from","try_into","type_id","Import","alias","borrow","borrow_mut","eq","external","fmt","from","into","ne","parse_import","path","try_from","try_into","type_id","Add","Add","And","BINOP_PRECEDENCE","Div","EQ","Geq","Gt","KEYWORDS","Leq","Lt","Mod","Mul","Neq","Not","Operator","Or","Pow","Sub","Sub","UNOPS","UnOperator","add","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","clone","clone","clone_into","clone_into","cmp","cmp","comma","comment","deref","deref","div","dot","end","eq","eq","equal","external","fmt","fmt","from","from","from","from","fun","greater_eq_than","greater_than","import","initialize","initialize","into","into","into","into","land","las","ldo","left_bracket","left_paren","lelse","less_eq_than","less_than","lfor","lif","lin","llet","lor","lreturn","lwhile","mul","newline","partial_cmp","partial_cmp","right_bracket","right_paren","sub","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unequal"],"q":["liva_parser","","","","","","","","","liva_parser::expression","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liva_parser::expression::ExprOrVarname","","liva_parser::expression::ExprSuffix","","","liva_parser::expression::Expression","","","","","liva_parser::expression::UnOrBinOp","","liva_parser::expression::binary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liva_parser::expression::call","","","","","","","","","","","","","","","","liva_parser::literals","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liva_parser::literals::Literal","","","","","","","liva_parser::statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liva_parser::statement::Statement","","","","","","","","","","","liva_parser::statement::declaration","","","","","","liva_parser::statement::declaration::assignment","","","","","","","","","","","","","","","","","","","","","","","","","","liva_parser::statement::declaration::class","","","","","","","","","","","","","","liva_parser::statement::declaration::for_statement","","","","","","","","","","","","liva_parser::statement::declaration::function","","","","","","","","","","","","","","","liva_parser::statement::declaration::if_statement","","","","","","","","","","","","","","","liva_parser::statement::declaration::while_statement","","","","","","","","","","","","liva_parser::statement::import","","","","","","","","","","","","","","","liva_parser::tokens","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Logic for expressions and their representation","Collection of all possible literals","Entry point to the parser, which parse the liva language","Entry point to the parser, which parse the liva language","Prints the AST of the parsed liva source code","Collection of all statements","Collection of all parsers and structs which represent …mport other modules into the current namespace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Functions are declared with the <code>fun</code> keyword, followed by …","Conditional code execution though If statements","","A assignment is a statement, while a re-assignemnt is an …","A assignment is a statement, while a re-assignemnt is an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a function declaration.","","","","","","","Name of the function","","Parameter list, of the function","Parses a function declaration.","Block contains all statements which are executed, when the …","","","","Struct to represent a If-Block","","","Expression which will be evaluated. If it yields a truthy …","Code block to execute if condition returns a falsy value. …","","","","","","Parses the input into a If struct","Code block to execute","","","","","","","","","","","","","","","","The import struct represents one import statement","For convenience can a import be aliased, which represented …","","","","If a module is a third-party module, therefore not in the …","","","","","Parses the input inot a Import struct","The path defines where to look for the import. A path is …","","","","","","","Vector of binary operators which show the precedence of …","","","","","Reserved keywords for the liva lang, which can not be used …","","","","","","","All Operators which are used in the language for binary …","","","","","Vector of unary operators which show the precedence of the …","All Operators which are used in the language for unary …","Macro generated function Token parser to parse token","","","","","","","","","Macro generated function Token parser to parse token","","","","","","","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","","","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","","","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","","","","","","","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","","","","","","","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","","","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","","","","","","","","","","","","","","","Macro generated function Token parser to parse token"],"i":[0,0,0,0,0,0,0,0,0,1,2,2,3,0,0,0,4,2,0,2,4,4,1,0,2,3,0,2,5,3,1,4,2,5,3,1,4,0,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,5,5,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,6,7,8,9,10,11,12,13,14,15,16,17,0,0,18,19,18,19,18,19,18,19,18,19,18,19,18,19,18,19,18,18,19,18,19,19,18,18,19,18,19,18,19,18,19,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,0,21,21,21,21,0,0,21,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,22,21,23,23,22,21,23,23,22,22,21,23,23,22,21,23,22,21,23,22,21,23,22,24,25,26,27,28,29,30,31,0,31,31,31,31,31,31,31,31,31,0,0,31,32,31,33,32,31,33,0,32,31,33,32,31,33,32,31,33,0,32,31,33,32,31,33,0,32,31,33,32,31,33,32,31,33,33,34,35,36,37,38,39,40,41,42,43,44,0,0,0,0,0,0,0,0,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,0,47,47,47,47,47,47,47,47,47,0,47,47,47,0,48,48,48,48,48,48,48,0,48,48,48,0,49,49,49,49,49,49,49,49,49,0,49,49,49,49,0,50,50,50,50,50,50,50,50,50,0,50,50,50,50,0,51,51,51,51,51,51,51,0,51,51,51,0,52,52,52,52,52,52,52,52,52,0,52,52,52,52,53,54,53,0,53,53,53,53,0,53,53,53,53,53,54,0,53,53,53,54,0,0,0,55,56,53,54,55,56,53,54,0,53,54,53,54,53,54,0,0,55,56,0,0,0,53,54,0,0,53,54,55,56,53,54,0,0,0,0,55,56,55,56,53,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,54,0,0,0,53,54,55,56,53,54,55,56,53,54,55,56,53,54,0],"f":[null,null,null,null,[[["span",6]],[["res",6,["block"]],["block",3]]],[[["span",6]],[["res",6,["block"]],["block",3]]],[[["str",15]],[["box",3,["error"]],["result",4,["box"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["expression",4]],[[],["prefixexpr",3]],[[],["exprorvarname",4]],[[],["unorbinop",4]],[[],["exprsuffix",4]],[[]],[[]],[[]],[[]],[[]],[[["expression",4]],["bool",15]],[[["prefixexpr",3]],["bool",15]],[[["exprorvarname",4]],["bool",15]],[[["unorbinop",4]],["bool",15]],[[["exprsuffix",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["expression",4]],["bool",15]],[[["prefixexpr",3]],["bool",15]],[[["exprorvarname",4]],["bool",15]],[[["unorbinop",4]],["bool",15]],[[["exprsuffix",4]],["bool",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["binaryop",3]],[[],["unaryop",3]],[[]],[[]],[[["binaryop",3]],["bool",15]],[[["unaryop",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["binaryop",3]],["bool",15]],[[["unaryop",3]],["bool",15]],null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],null,[[],["call",3]],[[]],[[["call",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["call",3]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["token",3]],[[],["literal",4]],[[],["variable",3]],[[]],[[]],[[]],[[],["bool",15]],[[["literal",4]],["bool",15]],[[["variable",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[["literal",4]],["bool",15]],[[["variable",3]],["bool",15]],[[["str",15]]],null,[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[["block",3]],["bool",15]],[[["statement",4]],["bool",15]],[[["returnstmt",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[["block",3]],["bool",15]],[[["statement",4]],["bool",15]],[[["returnstmt",3]],["bool",15]],[[["span",6]],[["res",6,["block"]],["block",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["assignment",3]],["bool",15]],[[["lassignment",3]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["assignment",3]],["bool",15]],[[["lassignment",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[["class",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],null,null,[[["class",3]],["bool",15]],[[["span",6]],[["res",6,["class"]],["class",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["for",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["for",3]],["bool",15]],[[["span",6]],[["res",6,["for"]],["for",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["function",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[["function",3]],["bool",15]],null,[[["span",6]],[["function",3],["res",6,["function"]]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,null,[[["if",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["if",3]],["bool",15]],[[["span",6]],[["if",3],["res",6,["if"]]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["while",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["while",3]],["bool",15]],[[["span",6]],[["res",6,["while"]],["while",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[["import",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[["import",3]],["bool",15]],[[["span",6]],[["res",6,["import"]],["import",3]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["span",6]],[["res",6,["span"]],["span",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[],["operator",4]],[[],["unoperator",4]],[[]],[[]],[[["operator",4]],["ordering",4]],[[["unoperator",4]],["ordering",4]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[],["vec",3]],[[],["vec",3]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["operator",4]],["bool",15]],[[["unoperator",4]],["bool",15]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["operator",4]],[["option",4,["ordering"]],["ordering",4]]],[[["unoperator",4]],[["option",4,["ordering"]],["ordering",4]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[["span",6]],[["res",6,["span"]],["span",6]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["span",6]],[["res",6,["span"]],["span",6]]]],"p":[[4,"UnOrBinOp"],[4,"Expression"],[4,"ExprOrVarname"],[4,"ExprSuffix"],[3,"PrefixExpr"],[13,"Exp"],[13,"Varname"],[13,"TableDot"],[13,"TableIdx"],[13,"FuncCall"],[13,"Literal"],[13,"Call"],[13,"BinaryOp"],[13,"UnaryOp"],[13,"PrefixExpr"],[13,"UnOp"],[13,"BinOp"],[3,"BinaryOp"],[3,"UnaryOp"],[3,"Call"],[4,"Literal"],[3,"Token"],[3,"Variable"],[13,"Str"],[13,"Boolean"],[13,"Nil"],[13,"Num"],[13,"Array"],[13,"Map"],[13,"Variable"],[4,"Statement"],[3,"Block"],[3,"ReturnStmt"],[13,"Assignment"],[13,"LAssignment"],[13,"FuncCall"],[13,"While"],[13,"For"],[13,"If"],[13,"Fun"],[13,"Class"],[13,"Return"],[13,"Expression"],[13,"Import"],[3,"Assignment"],[3,"LAssignment"],[3,"Class"],[3,"For"],[3,"Function"],[3,"If"],[3,"While"],[3,"Import"],[4,"Operator"],[4,"UnOperator"],[3,"UNOPS"],[3,"BINOP_PRECEDENCE"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};