var searchIndex = JSON.parse('{\
"liva_parser":{"doc":"The parser for the liva source code","t":[6,0,0,5,5,5,0,0,13,13,13,13,4,4,4,13,13,3,13,13,13,13,4,13,13,0,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,3,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,3,13,13,13,13,13,13,13,13,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,3,13,13,13,13,17,13,13,13,13,13,13,4,13,13,13,13,3,4,5,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,11,11,5,5,5,11,11,5,5,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["Res","expression","literals","parse_source","parse_source","print_ast","statement","tokens","BinOp","BinaryOp","Call","Exp","ExprOrVarname","ExprSuffix","Expression","FuncCall","Literal","PrefixExpr","PrefixExpr","TableDot","TableIdx","UnOp","UnOrBinOp","UnaryOp","Varname","binary","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","ne","ne","ne","ne","ne","prefix","suffix_chain","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","BinaryOp","UnaryOp","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","into","into","left","ne","ne","op","op","operand","right","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Call","args","borrow","borrow_mut","callee","clone","clone_into","eq","fmt","from","into","ne","to_owned","try_from","try_into","type_id","Array","Boolean","Literal","Map","Nil","Num","Str","Variable","Variable","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","into","into","name","ne","ne","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","Assignment","Block","Class","Expression","For","Fun","FuncCall","If","Import","LAssignment","Return","ReturnStmt","Statement","While","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","ne","ne","ne","parse_block","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","values","0","0","0","0","0","0","0","0","0","0","0","Add","Add","And","BINOP_PRECEDENCE","Div","EQ","Geq","Gt","KEYWORDS","Leq","Lt","Mod","Mul","Neq","Not","Operator","Or","Pow","Sub","Sub","UNOPS","UnOperator","add","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","clone","clone","clone_into","clone_into","cmp","cmp","comma","deref","deref","div","dot","end","eq","eq","equal","external","fmt","fmt","from","from","from","from","fun","greater_eq_than","greater_than","import","initialize","initialize","into","into","into","into","land","las","ldo","left_bracket","left_paren","lelse","less_eq_than","less_than","lfor","lif","lin","llet","lor","lreturn","lwhile","mul","partial_cmp","partial_cmp","right_bracket","right_paren","sub","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unequal"],"q":["liva_parser","","","","","","","","liva_parser::expression","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liva_parser::expression::ExprOrVarname","","liva_parser::expression::ExprSuffix","","","liva_parser::expression::Expression","","","","","liva_parser::expression::UnOrBinOp","","liva_parser::expression::binary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liva_parser::expression::call","","","","","","","","","","","","","","","","liva_parser::literals","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liva_parser::literals::Literal","","","","","","liva_parser::statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","liva_parser::statement::Statement","","","","","","","","","","","liva_parser::tokens","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for expressions and their representation","Collection of all possible literals","Entry point to the parser, which parse the liva language","Entry point to the parser, which parse the liva language","Prints the AST of the parsed liva source code","Collection of all statements","Collection of all parsers and structs which represent …ector of binary operators which show the precedence of …","","","","","Reserved keywords for the liva lang, which can not be used …","","","","","","","All Operators which are used in the language for binary …","","","","","Vector of unary operators which show the precedence of the …","All Operators which are used in the language for unary …","Macro generated function Token parser to parse token","","","","","","","","","Macro generated function Token parser to parse token","","","","","","","Macro generated function Token parser to parse token","","","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","","","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","","","","","","","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","","","","","","","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","","","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","Macro generated function Token parser to parse token","","","","","","","","","","","","","","","Macro generated function Token parser to parse token"],"i":[0,0,0,0,0,0,0,0,1,2,2,3,0,0,0,4,2,0,2,4,4,1,0,2,3,0,2,5,3,1,4,2,5,3,1,4,0,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,5,5,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,2,5,3,1,4,6,7,8,9,10,11,12,13,14,15,16,17,0,0,18,19,18,19,18,19,18,19,18,19,18,19,18,19,18,19,18,18,19,18,19,19,18,18,19,18,19,18,19,18,19,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,0,21,21,21,21,0,21,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,22,22,21,22,22,21,22,21,22,21,22,21,22,23,24,25,26,27,28,29,0,29,29,29,29,29,29,29,29,29,0,0,29,30,29,31,30,29,31,30,29,31,30,29,31,30,29,31,30,29,31,30,29,31,0,30,29,31,30,29,31,30,29,31,31,32,33,34,35,36,37,38,39,40,41,42,43,44,43,0,43,43,43,43,0,43,43,43,43,43,44,0,43,43,43,44,0,0,0,45,46,43,44,45,46,43,44,0,43,44,43,44,43,44,0,45,46,0,0,0,43,44,0,0,43,44,45,46,43,44,0,0,0,0,45,46,45,46,43,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,0,0,0,43,44,45,46,43,44,45,46,43,44,45,46,43,44,0],"f":[null,null,null,[[["str",15]],[["res",6,["str","block"]],["str",15],["block",3]]],[[["str",15]],[["res",6,["str","block"]],["str",15],["block",3]]],[[["str",15]],[["box",3,["error"]],["result",4,["box"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["expression",4]],[[],["prefixexpr",3]],[[],["exprorvarname",4]],[[],["unorbinop",4]],[[],["exprsuffix",4]],[[]],[[]],[[]],[[]],[[]],[[["expression",4]],["bool",15]],[[["prefixexpr",3]],["bool",15]],[[["exprorvarname",4]],["bool",15]],[[["unorbinop",4]],["bool",15]],[[["exprsuffix",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["expression",4]],["bool",15]],[[["prefixexpr",3]],["bool",15]],[[["exprorvarname",4]],["bool",15]],[[["unorbinop",4]],["bool",15]],[[["exprsuffix",4]],["bool",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["binaryop",3]],[[],["unaryop",3]],[[]],[[]],[[["binaryop",3]],["bool",15]],[[["unaryop",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["binaryop",3]],["bool",15]],[[["unaryop",3]],["bool",15]],null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],null,[[],["call",3]],[[]],[[["call",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["call",3]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["literal",4]],[[],["variable",3]],[[]],[[]],[[["literal",4]],["bool",15]],[[["variable",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["literal",4]],["bool",15]],[[["variable",3]],["bool",15]],[[["str",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["block",3]],["bool",15]],[[["statement",4]],["bool",15]],[[["returnstmt",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["block",3]],["bool",15]],[[["statement",4]],["bool",15]],[[["returnstmt",3]],["bool",15]],[[["str",15]],[["res",6,["str","block"]],["str",15],["block",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[],["operator",4]],[[],["unoperator",4]],[[]],[[]],[[["operator",4]],["ordering",4]],[[["unoperator",4]],["ordering",4]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[],["vec",3]],[[],["vec",3]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["operator",4]],["bool",15]],[[["unoperator",4]],["bool",15]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["operator",4]],[["option",4,["ordering"]],["ordering",4]]],[[["unoperator",4]],[["option",4,["ordering"]],["ordering",4]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[["str",15]],[["res",6,["str","str"]],["str",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["str",15]],[["res",6,["str","str"]],["str",15]]]],"p":[[4,"UnOrBinOp"],[4,"Expression"],[4,"ExprOrVarname"],[4,"ExprSuffix"],[3,"PrefixExpr"],[13,"Exp"],[13,"Varname"],[13,"TableDot"],[13,"TableIdx"],[13,"FuncCall"],[13,"Literal"],[13,"Call"],[13,"BinaryOp"],[13,"UnaryOp"],[13,"PrefixExpr"],[13,"UnOp"],[13,"BinOp"],[3,"BinaryOp"],[3,"UnaryOp"],[3,"Call"],[4,"Literal"],[3,"Variable"],[13,"Str"],[13,"Boolean"],[13,"Num"],[13,"Array"],[13,"Map"],[13,"Variable"],[4,"Statement"],[3,"Block"],[3,"ReturnStmt"],[13,"Assignment"],[13,"LAssignment"],[13,"FuncCall"],[13,"While"],[13,"For"],[13,"If"],[13,"Fun"],[13,"Class"],[13,"Return"],[13,"Expression"],[13,"Import"],[4,"Operator"],[4,"UnOperator"],[3,"UNOPS"],[3,"BINOP_PRECEDENCE"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};