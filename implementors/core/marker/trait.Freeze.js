(function() {var implementors = {};
implementors["liva_parser"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"liva_parser/expression/binary/struct.BinaryOp.html\" title=\"struct liva_parser::expression::binary::BinaryOp\">BinaryOp</a>","synthetic":true,"types":["liva_parser::parser::expression::binary::BinaryOp"]},{"text":"impl Freeze for <a class=\"struct\" href=\"liva_parser/expression/binary/struct.UnaryOp.html\" title=\"struct liva_parser::expression::binary::UnaryOp\">UnaryOp</a>","synthetic":true,"types":["liva_parser::parser::expression::binary::UnaryOp"]},{"text":"impl Freeze for <a class=\"struct\" href=\"liva_parser/expression/call/struct.Call.html\" title=\"struct liva_parser::expression::call::Call\">Call</a>","synthetic":true,"types":["liva_parser::parser::expression::call::Call"]},{"text":"impl Freeze for <a class=\"enum\" href=\"liva_parser/expression/enum.Expression.html\" title=\"enum liva_parser::expression::Expression\">Expression</a>","synthetic":true,"types":["liva_parser::parser::expression::Expression"]},{"text":"impl Freeze for <a class=\"struct\" href=\"liva_parser/expression/struct.PrefixExpr.html\" title=\"struct liva_parser::expression::PrefixExpr\">PrefixExpr</a>","synthetic":true,"types":["liva_parser::parser::expression::PrefixExpr"]},{"text":"impl Freeze for <a class=\"enum\" href=\"liva_parser/expression/enum.ExprOrVarname.html\" title=\"enum liva_parser::expression::ExprOrVarname\">ExprOrVarname</a>","synthetic":true,"types":["liva_parser::parser::expression::ExprOrVarname"]},{"text":"impl Freeze for <a class=\"enum\" href=\"liva_parser/expression/enum.UnOrBinOp.html\" title=\"enum liva_parser::expression::UnOrBinOp\">UnOrBinOp</a>","synthetic":true,"types":["liva_parser::parser::expression::UnOrBinOp"]},{"text":"impl Freeze for <a class=\"enum\" href=\"liva_parser/expression/enum.ExprSuffix.html\" title=\"enum liva_parser::expression::ExprSuffix\">ExprSuffix</a>","synthetic":true,"types":["liva_parser::parser::expression::ExprSuffix"]},{"text":"impl Freeze for <a class=\"enum\" href=\"liva_parser/literals/enum.Literal.html\" title=\"enum liva_parser::literals::Literal\">Literal</a>","synthetic":true,"types":["liva_parser::parser::literals::Literal"]},{"text":"impl Freeze for <a class=\"struct\" href=\"liva_parser/literals/struct.Variable.html\" title=\"struct liva_parser::literals::Variable\">Variable</a>","synthetic":true,"types":["liva_parser::parser::literals::Variable"]},{"text":"impl Freeze for <a class=\"struct\" href=\"liva_parser/statement/struct.Block.html\" title=\"struct liva_parser::statement::Block\">Block</a>","synthetic":true,"types":["liva_parser::parser::statement::Block"]},{"text":"impl Freeze for <a class=\"enum\" href=\"liva_parser/statement/enum.Statement.html\" title=\"enum liva_parser::statement::Statement\">Statement</a>","synthetic":true,"types":["liva_parser::parser::statement::Statement"]},{"text":"impl Freeze for <a class=\"struct\" href=\"liva_parser/statement/struct.ReturnStmt.html\" title=\"struct liva_parser::statement::ReturnStmt\">ReturnStmt</a>","synthetic":true,"types":["liva_parser::parser::statement::ReturnStmt"]},{"text":"impl Freeze for <a class=\"struct\" href=\"liva_parser/tokens/struct.UNOPS.html\" title=\"struct liva_parser::tokens::UNOPS\">UNOPS</a>","synthetic":true,"types":["liva_parser::parser::tokens::UNOPS"]},{"text":"impl Freeze for <a class=\"struct\" href=\"liva_parser/tokens/struct.BINOP_PRECEDENCE.html\" title=\"struct liva_parser::tokens::BINOP_PRECEDENCE\">BINOP_PRECEDENCE</a>","synthetic":true,"types":["liva_parser::parser::tokens::BINOP_PRECEDENCE"]},{"text":"impl Freeze for <a class=\"enum\" href=\"liva_parser/tokens/enum.Operator.html\" title=\"enum liva_parser::tokens::Operator\">Operator</a>","synthetic":true,"types":["liva_parser::parser::tokens::Operator"]},{"text":"impl Freeze for <a class=\"enum\" href=\"liva_parser/tokens/enum.UnOperator.html\" title=\"enum liva_parser::tokens::UnOperator\">UnOperator</a>","synthetic":true,"types":["liva_parser::parser::tokens::UnOperator"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()